#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec3 vertexColor; 
layout(location = 3) in vec2 vertexUV;

// Uniform Inputs
uniform mat4 ViewProjectionTransform;
uniform mat4 WorldTransform;
uniform mat4 CameraView;
uniform vec3 lightPosition;
uniform mat4 LightVP;

// Outputs to fragment shader
out vec3 normal;  // You will need this when you do per-fragment lighting
out vec4 v_color;
out vec4 worldPosition;
out vec4 shadowMapCoords0;
out vec2 UV;

//----FOG------------------------------------
out float fogVisibility;
const float density = 0.008; //thickness of the fog
const float gradient = 8; //how quickly the (fog) visibility decreases
//-------------------------------------------


void main()
{
	// Output position of the vertex, in clip space : MVP * position
	worldPosition = WorldTransform * vec4(vertexPosition_modelspace,1);
	gl_Position =  ViewProjectionTransform * worldPosition;
	shadowMapCoords0 = LightVP * WorldTransform * vec4(vertexPosition_modelspace,1);


	//olNormal = vertexNormal_modelspace	
	normal = normalize((WorldTransform * vec4(vertexNormal_modelspace, 0.0)).xyz);
	v_color = vec4(vertexColor, 1.0f);	


	//----------------FOG--------------------------------------------
	vec4 positionRelativeToCam = CameraView * worldPosition;
	float distance = length(positionRelativeToCam.xyz); 
	fogVisibility = exp(-pow((distance * density),gradient));
	fogVisibility = clamp(fogVisibility, 0.0, 1.0);
	//---------------------------------------------------------------
		

			
}

