#version 330 core

// Ouput to fragment shader
out vec3 color;

in vec4 v_color;
in vec3 normal; // You will need this when you do per-fragment lighting
in vec4 worldPosition;
in vec4 shadowMapCoords0;
in vec2 UV; // for textures

// Light and Material Uniform Variables
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent
uniform sampler2D mySamplerTexture;// for textures
uniform vec3 worldCamPos;
//uniform sampler2DShadow R_shadowMap;


#define MAX_LIGHTS 10
uniform int numLights;
uniform struct Light {
   vec4 position;
   vec3 intensities; //a.k.a the color of the light
   float attenuation;
   float ambientCoefficient;
   float coneAngle;
   vec3 coneDirection;
} allLights[MAX_LIGHTS];

vec2 poissonDisk[16] = vec2[]( 
   vec2( -0.94201624, -0.39906216 ), 
   vec2( 0.94558609, -0.76890725 ), 
   vec2( -0.094184101, -0.92938870 ), 
   vec2( 0.34495938, 0.29387760 ), 
   vec2( -0.91588581, 0.45771432 ), 
   vec2( -0.81544232, -0.87912464 ), 
   vec2( -0.38277543, 0.27676845 ), 
   vec2( 0.97484398, 0.75648379 ), 
   vec2( 0.44323325, -0.97511554 ), 
   vec2( 0.53742981, -0.47373420 ), 
   vec2( -0.26496911, -0.41893023 ), 
   vec2( 0.79197514, 0.19090188 ), 
   vec2( -0.24188840, 0.99706507 ), 
   vec2( -0.81409955, 0.91437590 ), 
   vec2( 0.19984126, 0.78641367 ), 
   vec2( 0.14383161, -0.14100790 ) 
);

// Returns a random number based on a vec3 and an int.
float random(vec3 seed, int i){
	vec4 seed4 = vec4(seed,i);
	float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));
	return fract(sin(dot_product) * 43758.5453);
}

vec3 ApplyLight(Light light, vec3 surfaceColor, vec3 normal, vec3 surfacePos, vec3 surfaceToCamera) {
    vec3 surfaceToLight;
    float attenuation = 1.0;
    if(light.position.w == 0.0) {
        //directional light
        surfaceToLight = normalize(light.position.xyz - worldPosition.xyz);
        attenuation = 1.0; //no attenuation for directional lights

    } else {
        //point light
        surfaceToLight = normalize(light.position.xyz - worldPosition.xyz);
        float distanceToLight = length(light.position.xyz - worldPosition.xyz);
        attenuation = 1.0 / (1.0 + light.attenuation * pow(distanceToLight, 2));

        //cone restrictions (affects attenuation)
        float lightToSurfaceAngle = degrees(acos(dot(-surfaceToLight, normalize(light.coneDirection))));

        if(lightToSurfaceAngle > light.coneAngle){
            attenuation = 0.0;
        }
    }	
    //ambient
    vec3 ambient = light.ambientCoefficient * surfaceColor.rgb * light.intensities;

    //diffuse
    float diffuseCoefficient = max(0.0, dot(normal, surfaceToLight));
    vec3 diffuse = diffuseCoefficient * surfaceColor.rgb * light.intensities;
    
    //specular
    float specularCoefficient = 0.0;	
	vec3 reflection = (((2*diffuseCoefficient)*normal) - surfaceToLight); // from notes	
		
	//specularCoefficient = pow(max(0.0, dot(surfaceToCamera, reflect(-surfaceToLight, normal))), materialCoefficients.w);
		
    if(diffuseCoefficient > 0.0)
		specularCoefficient = pow(max(dot(reflection,surfaceToCamera), 0.0), materialCoefficients.w);
    vec3 specular = specularCoefficient * materialCoefficients.z * light.intensities;
		
    //linear color (color before gamma correction)
    return ambient + attenuation*(diffuse + specular);
}


float ApplyShadow(Light light) {    
  
    //directional light
    vec3 surfaceToLight = normalize(light.position.xyz - worldPosition.xyz);
      
	float cosTheta = clamp( dot( normal, surfaceToLight ), 0,1 );

	float visibility=1.0;

	// Fixed bias, or...
	//float bias = 0.005;

	// ...variable bias
	//float bias = 0.005*tan(acos(cosTheta));
	//bias = clamp(bias, 0,0.01);

	// Sample the shadow map 4 times
	//for (int i=0;i<4;i++){
		// use either :
		//  - Always the same samples.
		//    Gives a fixed pattern in the shadow, but no noise
		//int index = i;		
		
		// being fully in the shadow will eat up 4*0.2 = 0.8
		// 0.2 potentially remain, which is quite dark.
		//visibility -= 0.2*(1.0-texture( R_shadowMap, vec3(shadowMapCoords0.xy + poissonDisk[index]/700.0,  (shadowMapCoords0.z-bias)/shadowMapCoords0.w) ));
	//}	
   
    return visibility;
}

void main() {    
    vec3 surfacePos = worldPosition.xyz;
    //vec4 surfaceColor = v_color;//texture(materialTex, fragTexCoord);
    vec4 surfaceColor = texture2D(mySamplerTexture, UV);
	vec3 surfaceToCamera = normalize(worldCamPos - surfacePos);

    //combine color from all the lights
    vec3 linearColor = vec3(0);

	if (numLights > 1){
		for(int i = 0; i < numLights; ++i){      		
			linearColor += ApplyLight(allLights[i], surfaceColor.rgb, normal, surfacePos, surfaceToCamera);		
		}	
	}

    //float e = ApplyShadow(allLights[0]);
    
    //final color (after gamma correction)
    vec3 gamma = vec3(1.0/2.2);

	//final color
	color = v_color.rgb * linearColor;
  
}
