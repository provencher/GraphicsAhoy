#version 330 core

// Ouput to fragment shader
out vec3 color;

in vec4 v_color;
in vec3 normal; // You will need this when you do per-fragment lighting
in vec4 lightVector;
in vec3 eyeVector;

// Light and Material Uniform Variables
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent
uniform vec3 lightColor;

void main()
{	
	vec3 unitNormal = normalize(normal);
	vec3 unitLightVector = (normalize(lightVector)).xyz;
	vec3 unitEyeVector = normalize(eyeVector);
	
	//ambient
	vec3 ambient = materialCoefficients.x * lightColor;

	//diffuse
	float nDot1 = dot(unitNormal, unitLightVector);
	float fixedDot1 = max(nDot1, 0.0);	
	vec3 diffuse = fixedDot1 * lightColor;	

	//specular
	float specularCoefficient = 0.0;
	vec3 reflection = (((2*fixedDot1)*unitNormal) - unitLightVector); // from notes	
	vec3 specular = lightColor * materialCoefficients.z * pow(max(dot(reflection,unitEyeVector), 0.0), materialCoefficients.w);



	//attenuation	
	float distanceToLight = length(unitLightVector);
	float attenuation = 1.0 / (1.0 + (distanceToLight*distanceToLight));	
	

	//If point light, w = 1
	if (lightVector.w == 1.0)
	{
		color = ambient + attenuation*(diffuse+specular);
		//color = ambient + diffuse + specular;
		
	}
	//Directional light
	else
	{
		color = ambient + diffuse + specular;
	}
		
	color = color * v_color.rgb;
}