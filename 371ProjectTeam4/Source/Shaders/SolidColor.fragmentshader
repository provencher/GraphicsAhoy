#version 330 core

// Ouput to fragment shader
out vec3 color;

in vec4 v_color;
in vec3 normal; // You will need this when you do per-fragment lighting
in vec4 worldPosition;
in vec4 shadowMapCoords0;

// Light and Material Uniform Variables
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent

uniform vec3 worldCamPos;
uniform sampler2DShadow R_shadowMap;

#define MAX_LIGHTS 10
uniform int numLights;
uniform struct Light {
   vec4 position;
   vec3 intensities; //a.k.a the color of the light
   float attenuation;
   float ambientCoefficient;
   float coneAngle;
   vec3 coneDirection;
} allLights[MAX_LIGHTS];


vec3 ApplyLight(Light light, vec3 surfaceColor, vec3 normal, vec3 surfacePos, vec3 surfaceToCamera) {
    vec3 surfaceToLight;
    float attenuation = 1.0;
    if(light.position.w == 0.0) {
        //directional light
        surfaceToLight = normalize(light.position.xyz - worldPosition.xyz);
        attenuation = 1.0; //no attenuation for directional lights

    } else {
        //point light
        surfaceToLight = normalize(light.position.xyz - worldPosition.xyz);
        float distanceToLight = length(light.position.xyz - worldPosition.xyz);
        attenuation = 1.0 / (1.0 + light.attenuation * pow(distanceToLight, 2));

        //cone restrictions (affects attenuation)
        float lightToSurfaceAngle = degrees(acos(dot(-surfaceToLight, normalize(light.coneDirection))));

        if(lightToSurfaceAngle > light.coneAngle){
            attenuation = 0.0;
        }
    }	
    //ambient
    vec3 ambient = light.ambientCoefficient * surfaceColor.rgb * light.intensities;

    //diffuse
    float diffuseCoefficient = max(0.0, dot(normal, surfaceToLight));
    vec3 diffuse = diffuseCoefficient * surfaceColor.rgb * light.intensities;
    
    //specular
    float specularCoefficient = 0.0;	
	vec3 reflection = (((2*diffuseCoefficient)*normal) - surfaceToLight); // from notes	
		
	//specularCoefficient = pow(max(0.0, dot(surfaceToCamera, reflect(-surfaceToLight, normal))), materialCoefficients.w);
		
    if(diffuseCoefficient > 0.0)
		specularCoefficient = pow(max(dot(reflection,surfaceToCamera), 0.0), materialCoefficients.w);
    vec3 specular = specularCoefficient * materialCoefficients.z * light.intensities;
		
    //linear color (color before gamma correction)
    return ambient + attenuation*(diffuse + specular);
}

void main() {    
    vec3 surfacePos = worldPosition.xyz;
    vec4 surfaceColor = v_color;//texture(materialTex, fragTexCoord);
    vec3 surfaceToCamera = normalize(worldCamPos - surfacePos);

    //combine color from all the lights
    vec3 linearColor = vec3(0);
    for(int i = 0; i < numLights; ++i){
        linearColor += ApplyLight(allLights[i], surfaceColor.rgb, normal, surfacePos, surfaceToCamera);
    }
    
    //final color (after gamma correction)
    vec3 gamma = vec3(1.0/2.2);
    color = surfaceColor.rgb * linearColor;
}
